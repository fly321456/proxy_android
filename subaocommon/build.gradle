apply plugin: 'com.android.library'

apply plugin: 'maven'
apply plugin: 'maven-publish'

def artifactVersion = '1.0.1'

group = 'com.subao.gamemaster.sdk'
version = "${develop}".contentEquals('develop') ? 'develop' : artifactVersion
status = 'integration'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 11
        //noinspection OldTargetApi
        targetSdkVersion project.TARGET_SDK_VERSION as int
        versionCode project.VERSION_CODE as int
        versionName project.VERSION_NAME

        buildConfigField "String", "BUILD_NUM", "\"${project.BUILD_NUM}\""
        buildConfigField "String", "BUILD_TIME", "\"${now()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    testOptions {
        unitTests.all {
            jvmArgs '-XX:MaxPermSize=1024m' //prevent OOM (PermGen space) while running tests
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//artifactoryPublish {
//    dependsOn sourceJar
//}
def dst_filename = "${project.name}-${version}.jar"
def dst_dir = "${project.buildDir}/libs/"
def dst = dst_dir + dst_filename
def src_dir = 'build/intermediates/bundles/release/'
def src_filename = 'classes.jar'

task makeJar(type: Copy) {
    delete dst
    from(src_dir)
    into(dst_dir)
    include(src_filename)
    rename(src_filename, dst_filename)
}

makeJar.dependsOn(build)

//task publishJar(type:Copy /*type:Exec*/) {
////    workingDir '../'
////    commandLine 'cmd', '/c', 'publish.bat'
//    def destination_dir = '../Sample/libs/';
//    def destination_filename = 'SubaoGameMasterSDK.jar';
//    def destination = destination_dir + destination_filename;
//    delete destination
//    from(src_dir)
//    into(destination_dir)
//    include(src_filename)
//    rename(src_filename, destination_filename)
//}
//publishJar.dependsOn(build)

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId  group
            artifactId project.name
            version = artifactVersion
            artifact  dst
//            from components.java
        }
    }
}

def projectUrl = 'http://www.example.com'

task writeNewPom {
    println "Creating pom file at $buildDir/publications/mavenJava/pom-default.xml"
    pom {
        project {
            groupId group
            artifactId project.name
            version = artifactVersion
            name 'project-name'
            description 'description for project'
            url projectUrl
            inceptionYear '2015'
            scm {
                url projectUrl
                connection projectUrl
                developerConnection projectUrl
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'JFrog'
                    name 'JFrogDev'
                    email 'jfrogdev@jfrog.com'
                    url projectUrl
                    roles{
                        role 'Developer'
                    }
                    timezone '+8'
                }
            }
        }
    }.writeTo("$buildDir/publications/mavenJava/pom-default.xml")
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.4.1'
    testCompile 'org.mockito:mockito-core:2.2.27'
}
